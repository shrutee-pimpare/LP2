"""AI-1(bfs/dfs).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OfhhaPENG-xkad-aCeZHcCSHUb_EaLBE
"""

from collections import defaultdict

class Graph:
    def __init__(self):
        self.graph = defaultdict(list)

    def add_edge(self, u, v):
        self.graph[u].append(v)
        self.graph[v].append(u)

    def dfs_util(self, v, visited):
        visited.add(v)
        print(v, end=" ")

        for neighbor in self.graph[v]:
            if neighbor not in visited:
                self.dfs_util(neighbor, visited)

    def dfs(self, start):
        visited = set()
        self.dfs_util(start, visited)

    def bfs(self, start):
        visited = set()
        queue = [start]
        visited.add(start)

        while queue:
            vertex = queue.pop(0)
            print(vertex, end=" ")

            for neighbor in self.graph[vertex]:
                if neighbor not in visited:
                    queue.append(neighbor)
                    visited.add(neighbor)

# Create a graph object
graph = Graph()

# Get the number of edges from the user
num_edges = int(input("Enter the number of edges: "))

# Get the edges from the user
for _ in range(num_edges):
    u, v = input("Enter an edge (u v): ").split()
    graph.add_edge(u, v)

# Get the starting vertex for traversal
start_vertex = input("Enter the starting vertex: ")

# Perform DFS and BFS
print("Depth First Search (DFS):")
graph.dfs(start_vertex)

print("\nBreadth First Search (BFS):")
graph.bfs(start_vertex)