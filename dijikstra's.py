"""AI-4(dijikstra's).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1alMkG2llI3rTupLB2sEqioTxgKgY-UCk
"""

import sys

def dijkstra(graph, start, end):
    # Initialize the distances with infinity for all nodes except the start node
    distances = {node: float('inf') for node in graph}
    distances[start] = 0

    # Keep track of visited nodes and previous nodes in the shortest path
    visited = set()
    previous = {}

    while len(visited) < len(graph):
        # Find the node with the minimum distance
        min_distance = float('inf')
        min_node = None

        for node in graph:
            if node not in visited and distances[node] < min_distance:
                min_distance = distances[node]
                min_node = node

        # Mark the current node as visited
        visited.add(min_node)

        # Stop the algorithm if the destination node is reached
        if min_node == end:
            break

        # Update the distances of the neighboring nodes
        for neighbor, weight in graph[min_node].items():
            new_distance = distances[min_node] + weight
            if new_distance < distances[neighbor]:
                distances[neighbor] = new_distance
                previous[neighbor] = min_node

    # If there is no path to the destination node, return None
    if end not in previous:
        return None

    # Reconstruct the shortest path from start to end
    path = [end]
    node = end
    while node != start:
        node = previous[node]
        path.append(node)

    # Reverse the path to get the correct order
    path.reverse()

    return path, distances[end]

# Take graph input from the user
graph = {}
num_vertices = int(input("Enter the number of vertices in the graph: "))

for i in range(num_vertices):
    vertex = input("Enter the vertex: ")
    edges = input("Enter the connected vertices and their weights (comma-separated): ")
    edges = edges.split(',')

    graph[vertex] = {}
    for j in range(0, len(edges), 2):
        neighbor = edges[j]
        weight = int(edges[j+1])
        graph[vertex][neighbor] = weight

start_node = input("Enter the start node: ")
end_node = input("Enter the end node: ")

# Run Dijkstra's algorithm
shortest_path = dijkstra(graph, start_node, end_node)

if shortest_path is None:
    print("No path found.")
else:
    path, distance = shortest_path
    print("Shortest path:", ' -> '.join(path))
    print("Shortest distance:", distance)